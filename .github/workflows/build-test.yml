name: Build and Test

# This workflow builds the code and runs the unit tests and integration tests.
#
# If this workflow is executed in the context of a fork, the integration tests are
# skipped and just the unit tests are executed. See the workflow "Trigger
# Integration Tests for Forks" for more details on how the integration tests are
# executed for forks.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  merge_group: # run if triggered as part of a merge queue
  schedule:
    # this is checking periodically if there are any breaking API changes
    # Every day at 00:00
    - cron: '0 0 * * *'

defaults:
  run:
    shell: bash

jobs:
  build_test:
    name: Build and Test
    permissions:
      contents: read
      checks: write
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Check out code into the Go module directory
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

      - name: 🛠️ Set up Go 1.x
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 #v5.3.0
        with:
          go-version: '~1.23'

      - name: 🏗️ Compile
        run: make compile

      - name: 🧪 Unit test
        run: go test -race -tags=unit -coverprofile=ubuntu-latest-profile -covermode=atomic -coverpkg=./... ./...

      - name: ⬆️ upload coverage breakdown artifact (main.breakdown)
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 #v4.6.0
        if: github.ref_name == 'main'
        with:
          name: ubuntu-latest-profile
          path: ubuntu-latest-profile
          if-no-files-found: error

      - name: 🚀 Binary starts
        run: go run ./cmd/monaco

  check-coverage:
    needs: build_test
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: download ubuntu-latest-profile
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-profile

      - name: download artifact (main.breakdown)
        id: download-main-breakdown
        uses: dawidd6/action-download-artifact@v8
        continue-on-error: true
        with:
          branch: main
          workflow_conclusion: success
          name: main.breakdown
          if_no_artifact_found: fail

      - name: check test coverage
        id: coverage
        uses: vladopajic/go-test-coverage@v2
        continue-on-error: true # Should fail after coverage comment is posted
        with:
          config: ./.github/.testcoverage.yml
          profile: ubuntu-latest-profile
          breakdown-file-name: ${{ github.ref_name == 'main' && 'main.breakdown' || '' }}
          diff-base-breakdown-file-name: ${{ steps.download-main-breakdown.outputs.found_artifact == 'true' && 'main.breakdown' || '' }}

      - name: upload artifact (main.breakdown)
        uses: actions/upload-artifact@v4
        if: github.ref_name == 'main'
        with:
          name: main.breakdown
          path: main.breakdown
          if-no-files-found: error

      # Post coverage report as comment
      - name: find pull request ID
        run: |
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:${{ github.ref_name }}&state=open")
          PR_ID=$(echo "$PR_DATA" | jq -r '.[0].number')

          if [ "$PR_ID" != "null" ]; then
            echo "pull_request_id=$PR_ID" >> $GITHUB_ENV
          else
            echo "No open pull request found for this branch."
          fi

      - name: find if coverage report is already present
        if: env.pull_request_id
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ env.pull_request_id }}
          comment-author: 'github-actions[bot]'
          body-includes: 'go-test-coverage report:'

      - name: post coverage report
        if: env.pull_request_id
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ env.pull_request_id }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          body: |
            go-test-coverage report:
            ```
            ${{ fromJSON(steps.coverage.outputs.report) }}```

      - name: "finally check coverage"
        if: steps.coverage.outcome == 'failure'
        shell: bash
        run: echo "coverage check failed" && exit 1

